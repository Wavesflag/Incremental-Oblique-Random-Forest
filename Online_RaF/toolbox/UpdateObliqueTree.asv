function tree = UpdateObliqueTree(X,Y,nFeatoSample,tree,depth)
%update the PSVM based oblique Decision tree
% non-leaf node: simply update
% leaf node && case 1 (pure node) generate balanced data and train PSVM then check whether to split or not
% leaf node && case 2 ("bad" PSVM in previous training): simply update then check whether to split or not
% 2015/7/31. zhangleuestc@gmail.com
% rand('state',0)
% randn('state',0)
nu=100;
[~,D] = size(X);
if ~tree.bLeaf
     %non-leaf node, just update
        
        w_temp=[tree.w;tree.gamma];
        iIn=tree.iIn;
        EE_inverse=tree.EE_inverse;
        EDE=tree.EDE;
        
        status=Check_PSVM_update(tree.w,tree.gamma,X(:,iIn),Y);
      if status==1
          
        [w,EE_inverse,EDE]=update_psvm(w_temp,X(:,iIn),Y,EE_inverse,EDE);
        tree.w=w(1:end-1);
        tree.gamma=w(end);
        tree.EE_inverse=EE_inverse;
        tree.EDE=EDE;
      end
         bLessChild = (X(:,iIn)*tree.w)<=tree.gamma;
         if any(bLessChild)
        treeLeft =UpdateObliqueTree(X(bLessChild,:),Y(bLessChild),nFeatoSample,tree.lessthanChild,depth+1);
        tree.lessthanChild = treeLeft;
         end
         if any(~bLessChild)
        treeRight =UpdateObliqueTree(X(~bLessChild,:),Y(~bLessChild),nFeatoSample,tree.greaterthanChild,depth+1);
        tree.greaterthanChild = treeRight;
         end
else  
         % leaf node: pure node or 'bad' psvm in previous node
         if (numel(unique(Y))==1)&&(unique(Y)==tree.labelClassId)
             tree.data=[tree.data;X];
             tree.label=[tree.label;Y];
             return
         else
         idx_temp=randperm(D);
         iIn=idx_temp(1:nFeatoSample);
         data_temp=tree.data;
         y_temp=tree.label;
         data_temp=[data_temp;X];
         y_temp=[y_temp;Y];
         [w,gamma,EE_inverse,EDE, ~, ~, ~, ~]=psvm(data_temp(:,iIn),y_temp,0,nu,0,0); 
         tree.iIn=iIn;
         tree.w=w;
         tree.gamma=gamma;
         tree.EE_inverse=EE_inverse;
         tree.EDE=EDE;
         status = Check_PSVM(data_temp(:,iIn),w,gamma);
             if status==0
              tree = setupLeaf_v1(data_temp,y_temp,iIn,w,gamma,EE_inverse,EDE);
               return
             else
              tree.bLeaf=false;
              bLessChild = (data_temp(:,iIn)*tree.w)<=tree.gamma;
              treeLeft =growObliqueTree(data_temp(bLessChild,:),y_temp(bLessChild),nFeatoSample,depth+1);
              tree.data=[];
              tree.label=[];
              tree.lessthanChild = treeLeft;
              treeRight =growObliqueTree(data_temp(~bLessChild,:),y_temp(~bLessChild),nFeatoSample,depth+1);
              tree.data=[];
              tree.label=[];
              tree.greaterthanChild = treeRight;
             end
        end
end
end

% function tree = setupLeaf(YTrain)
% % Update tree struct to make node a leaf
% uY=unique(YTrain);
% count=zeros(numel(uY),1);
% for i=1:numel(uY)
%     count(i)=numel(find(YTrain==uY(i)));
% end
% [~,idx]=max(count);
% tree.bLeaf = true;
% tree.labelClassId = uY(idx);
% end
function status = Check_PSVM(X,w,gamma)
 %status=0 indicate "bad" PSVM
 status=1;
 X_temp=sign(X*w-gamma);
 if numel(unique(sign(X_temp(X_temp~=0))))==1
 status=0;
 end
end
 function status=Check_PSVM_update(w,gamma,X,Y)
 % status=1 indicates need to update   
 status=0;
 Y_temp=sign(X*w-gamma);
 if sum(abs(Y_temp-Y))>0.001
     status=1;
 end
 end
function tree = setupLeaf_v1(XTrain,YTrain,iIn,w,gamma,EE_inverse,EDE)
% Update tree struct to make node a leaf
uY=unique(YTrain);
count=zeros(numel(uY),1);
for i=1:numel(uY)
    count(i)=numel(find(YTrain==uY(i)));
end
[~,idx]=max(count);
tree.bLeaf = true;
tree.labelClassId = uY(idx);
if isfield(tree,'data')
    tree.data=[tree.data;XTrain];
    tree.label=[tree.label;YTrain];
end
tree.data=XTrain;
tree.label=YTrain;
end
function status=check_purity(Y)
status=0;
UY=unique(Y);
if numel(UY)==1
    status=1;
else if (numel(Y(Y==UY(1)))/numel(Y(Y==UY(2)))>10) || (numel(Y(Y==UY(1)))/numel(Y(Y==UY(2)))<1/10)
      status=1;
    end
end
end